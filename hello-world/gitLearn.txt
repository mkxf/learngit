1 创建一个版本库非常简单，首先，选择一个合适的地方，创建一个空目录：

$ mkdir learngit
$ cd learngit
$ pwd
pwd命令用于显示当前目录

2 第二步，通过git init命令把这个目录变成Git可以管理的仓库：
$ git init

3 如果你没有看到.git目录，那是因为这个目录默认是隐藏的，用ls -ah命令就可以看见

第一步，用命令git add告诉Git，把文件添加到仓库：

$ git add readme.txt

第二步，用命令git commit告诉Git，把文件提交到仓库：

$ git commit -m "wrote a readme file"

为什么Git添加文件需要add，commit一共两步呢
	因为commit可以一次提交很多文件，所以你可以多次add不同的文件


小结

现在总结一下今天学的两点内容：

初始化一个Git仓库，使用git init命令。

添加文件到Git仓库，分两步：

第一步，使用命令git add <file>，注意，可反复多次使用，添加多个文件；

第二步，使用命令git commit，完成。

如果git status告诉你有文件被修改过，用git diff可以查看修改内容


回退到上一个版本，就可以使用git reset命令：

$ git reset --hard HEAD^

回到未来的某个版本：

$ git reset --hard 3628164
HEAD is now at 3628164 append GPL
版本号没必要写全，前几位就可以了，Git会自动去找


$ git log --pretty=oneline
 显示 commitid 和内容

小心翼翼地看看readme.txt的内容：

$ cat readme.txt

HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令git reset --hard commit_id。

穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。

要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本。


第一步是用git add把文件添加进去，实际上就是把文件修改添加到暂存区；

第二步是用git commit提交更改，实际上就是把暂存区的所有内容提交到当前分支

因为我们创建Git版本库时，Git自动为我们创建了唯一一个master分支，所以，现在，git commit就是往master分支上提交更改
add 的文件在暂存区 ，commit后才在

第一次修改 -> git add -> 第二次修改 -> git add -> git commit

提交后，用git diff HEAD -- readme.txt命令可以查看工作区和版本库里面最新版本的区别

好，现在，把第二次修改提交了，然后开始小结。


命令git checkout -- readme.txt意思就是，把readme.txt文件在工作区的修改全部撤销
总之，就是让这个文件回到最近一次git commit或git add时的状态

git checkout

场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。

场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD file，就回到了场景1，第二步按场景1操作。

场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库