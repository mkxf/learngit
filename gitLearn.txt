1 创建一个版本库非常简单，首先，选择一个合适的地方，创建一个空目录：

$ mkdir learngit
$ cd learngit
$ pwd
pwd命令用于显示当前目录

2 第二步，通过git init命令把这个目录变成Git可以管理的仓库：
$ git init

3 如果你没有看到.git目录，那是因为这个目录默认是隐藏的，用ls -ah命令就可以看见

第一步，用命令git add告诉Git，把文件添加到仓库：

$ git add readme.txt

第二步，用命令git commit告诉Git，把文件提交到仓库：

$ git commit -m "wrote a readme file"

为什么Git添加文件需要add，commit一共两步呢
	因为commit可以一次提交很多文件，所以你可以多次add不同的文件


小结

现在总结一下今天学的两点内容：

初始化一个Git仓库，使用git init命令。

添加文件到Git仓库，分两步：

第一步，使用命令git add <file>，注意，可反复多次使用，添加多个文件；

第二步，使用命令git commit，完成。

如果git status告诉你有文件被修改过，用git diff可以查看修改内容


回退到上一个版本，就可以使用git reset命令：

$ git reset --hard HEAD^

回到未来的某个版本：

$ git reset --hard 3628164
HEAD is now at 3628164 append GPL
版本号没必要写全，前几位就可以了，Git会自动去找


$ git log --pretty=oneline
 显示 commitid 和内容

小心翼翼地看看readme.txt的内容：

$ cat readme.txt

HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令git reset --hard commit_id。

穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。

要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本。


第一步是用git add把文件添加进去，实际上就是把文件修改添加到暂存区；

第二步是用git commit提交更改，实际上就是把暂存区的所有内容提交到当前分支

因为我们创建Git版本库时，Git自动为我们创建了唯一一个master分支，所以，现在，git commit就是往master分支上提交更改
add 的文件在暂存区 ，commit后才在

第一次修改 -> git add -> 第二次修改 -> git add -> git commit

提交后，用git diff HEAD -- readme.txt命令可以查看工作区和版本库里面最新版本的区别

好，现在，把第二次修改提交了，然后开始小结。


命令git checkout -- readme.txt意思就是，把readme.txt文件在工作区的修改全部撤销
总之，就是让这个文件回到最近一次git commit或git add时的状态

git checkout

场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。

场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD file，就回到了场景1，第二步按场景1操作。

场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库

生成SSH Key
$ ssh-keygen -t rsa -C "youremail@example.com"
在用户主目录里找到.ssh目录，里面有id_rsa和id_rsa.pub两个文件，这两个就是SSH Key的秘钥对，id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人。

第2步：登陆GitHub，打开“Account settings”，“SSH Keys”页面：

然后，点“Add SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容
Add Key
不想让别人看到Git库，有两个办法，一个是交点保护费，让GitHub把公开的仓库变成私有的
另一个办法是自己动手，搭一个Git服务器，因为是你自己的Git服务器


============ 推送远程库
现在，我们根据GitHub的提示，把本地仓库的内容推送到GitHub仓库
在本地的learngit仓库下运行命令：

$ git remote add origin git@github.com:mkxf/learngit.git

添加后，远程库的名字就是origin，这是Git默认的叫法，也可以改成别的
下一步，就可以把本地库的所有内容推送到远程库上：

$ git push -u origin master
把本地库的内容推送到远程，用git push命令，实际上是把当前分支master推送到远程
(是本地库以及提交的东西推送进去
 验证正确：
 1. git add learngit.txt
 2. git commit -m 'edit for remote before add at local'
  此时刷新 github， 上边此文件没有刷新
 3. git push oriLearngit master
  oriLearngit 是远程库的名字，在创建的时候起的
  【 
  $ git remote add oriLearngit git@github.com:mkxf/learngit.git 
  】
  刷新 github，显示新加内容。
  )

  ----------
new branch dev
$ git branch -b dev
mean 2:
$ git branch dev
$ git checkout -b dev
creat and switch
now is in dev branch.
$ gti branch 
show current branch.
------------
准备新的feature1分支，继续我们的新分支开发：

	$ git checkout -b feature1
1. 修改readme.txt最后一行，改为：

	Creating a new branch is quick AND simple.

	在feature1分支上提交：

	$ git add readme.txt 
	$ git commit -m "AND simple"

2 切换到master分支：

	$ git checkout master
	在master分支上把readme.txt文件的最后一行改为：

	Creating a new branch is quick & simple.
	提交：

	$ git add readme.txt 
	$ git commit -m "& simple"
3. 这种情况下，Git无法执行“快速合并”，
	只能试图把各自的修改合并起来，但这种合并就可能会有冲突，我们试试看：

	$ git merge feature1

4. 们修改如下后保存：

	Creating a new branch is quick and simple.
	再提交：

	$ git add readme.txt 
	$ git commit -m "conflict fixed"


用带参数的git log也可以看到分支的合并情况
$ git log --graph --pretty=oneline --abbrev-commit
删除feature1分支
$ git branch -d feature1

=========
命令 告诉Git，以后st就表示status
 $ git config --global alias.st status
 当然还有别的命令可以简写，很多人都用co表示checkout，ci表示commit，br表示branch：

$ git config --global alias.co checkout
$ git config --global alias.ci commit
$ git config --global alias.br branch
以后提交就可以简写成：

$ git ci -m "bala bala bala..."

--global参数是全局参数，也就是这些命令在这台电脑的所有Git仓库下都有用

配置一个git last，让其显示最后一次提交信息：

$ git config --global alias.last 'log -1'
这样，用git last就能显示最近一次的提交：

$ git last

把lg配置成了：

git config --global alias.lg "log --color --graph 
--pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit"

当前用户的Git配置文件放在用户主目录下的一个隐藏文件.gitconfig中
=========

要强制禁用Fast forward模式，Git就会在merge时生成一个新的commit，这样，从分支历史上就可以看出分支信息。

下面我们实战一下--no-ff方式的git merge：

首先，仍然创建并切换dev分支：

$ git checkout -b dev
Switched to a new branch 'dev'
修改readme.txt文件，并提交一个新的commit：

$ git add readme.txt 
$ git commit -m "add merge"
现在，我们切换回master：

$ git checkout master
准备合并dev分支，请注意--no-ff参数，表示禁用Fast forward：

$ git merge --no-ff -m "merge with no-ff" dev
因为本次合并要创建一个新的commit，所以加上-m参数，把commit描述写进去。

合并后，我们用git log看看分支历史：

$ git log --graph --pretty=oneline --abbrev-commit

合并分支时，加上--no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并
-- end.

---bug 分支---------
stash功能，可以把当前工作现场“储藏”起来，等以后恢复现场后继续工作：

$ git stash
需要先 git add 到 暂存区 （-> 当前分支【工作区-> 版本库（暂存区，分支）】）
才会隐藏

----bug 分支 begin----
1. 正在dev 分支上干活，修改readme.txt 文件
2. 有bug 需要处理，但现在的文件和bug无关，需要先另保存，在正式版本上处理bug
	执行 git stash，把当前工作现场“储藏”起来
3. 假定需要在master分支上修复，就从master创建临时分支
  回到master
   $ git checkout master
   创建分支
   $ git checkout -b bg-101
4. 开始处理bug，修改readme.txt 文件，bug处理完毕，提交
	$ git add readme.txt 
	$ git commit -m "fix bug 101"
5.修复完成后，切换到master分支，并完成合并，最后删除bg-101分支
	$ git checkout master
	$ git merge --no-ff -m "merged bug fix 101" bg-101
	$ git branch -d bg-101
6. 处理完毕接着回到dev分支干活
	$ git checkout dev
7 查看工作区状态
	$git stash list
8 工作现场还在，Git把stash内容存在某个地方了，但是需要恢复一下
	 git stash apply恢复，但是恢复后，stash内容并不删除，
	 你需要用git stash drop来删除；

	$git stash apply
	$git stash drop
	或者
	$git stash pop  恢复的同时把stash内容也删了

	再用git stash list查看，就看不到任何stash内容
end 2
 1. 先在当前分支dev 保存现场 git stash 
  到主分支master,创建bug分支，处理，提交，然后回到master，再合并bug分支
	$ git merge --no-ff -m 'fix and merge to master' bg1
 删除bug 分支，bug 处理结束。
 回到dev分支，回复现场： 可以先查看现场状态$git stash list，然后回复
 $git stash pop 【stash@{0}】 ,开始工作.
 ----------------bug 分支end-------
 ==================================================================
 多人协作的工作模式通常是这样：

首先，可以试图用git push origin branch-name推送自己的修改；

如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；

如果合并有冲突，则解决冲突，并在本地提交；

没有冲突或者解决掉冲突后，再用git push origin branch-name推送就能成功！

如果git pull提示“no tracking information”，
则说明本地分支和远程分支的链接关系没有创建，
用命令git branch --set-upstream branch-name origin/branch-name。
------------------------
小结

查看远程库信息，使用git remote -v；

本地新建的分支如果不推送到远程，对其他人就是不可见的；

从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交；

在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；

建立本地分支和远程分支的关联，使用git branch --set-upstream branch-name origin/branch-name；

从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。
====================================================================
------------------- 标签--------------------


  


